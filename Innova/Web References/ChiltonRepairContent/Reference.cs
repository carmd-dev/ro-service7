//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Innova.ChiltonRepairContent {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InnovaContentDeliverySoap", Namespace="http://innova.content.chiltonsonline.com/")]
    public partial class InnovaContentDelivery : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private ChiltonAuthorizationHeader chiltonAuthorizationHeaderValueField;
        
        private System.Threading.SendOrPostCallback MapFixOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnmapFixOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllChiltonRepairsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllInnovaFixesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllMappedFixesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllMappedChiltonRepairsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUnmappedChiltonRepairsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMappedFixesForFixOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMappedFixesForRepairOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllOrphanedFixesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMatchingRepairsOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoreTranslatedArticleOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveTranslatedArticleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFixByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBaseVehiclesForPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback MappedFixVehicleExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FixVehicleExistsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public InnovaContentDelivery() {
            this.Url = "http://s-content.chiltonsonline.com/Services/InnovaContentDelivery.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public ChiltonAuthorizationHeader ChiltonAuthorizationHeaderValue {
            get {
                return this.chiltonAuthorizationHeaderValueField;
            }
            set {
                this.chiltonAuthorizationHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event MapFixCompletedEventHandler MapFixCompleted;
        
        /// <remarks/>
        public event UnmapFixCompletedEventHandler UnmapFixCompleted;
        
        /// <remarks/>
        public event GetAllChiltonRepairsCompletedEventHandler GetAllChiltonRepairsCompleted;
        
        /// <remarks/>
        public event GetAllInnovaFixesCompletedEventHandler GetAllInnovaFixesCompleted;
        
        /// <remarks/>
        public event GetAllMappedFixesCompletedEventHandler GetAllMappedFixesCompleted;
        
        /// <remarks/>
        public event GetAllMappedChiltonRepairsCompletedEventHandler GetAllMappedChiltonRepairsCompleted;
        
        /// <remarks/>
        public event GetAllUnmappedChiltonRepairsCompletedEventHandler GetAllUnmappedChiltonRepairsCompleted;
        
        /// <remarks/>
        public event GetMappedFixesForFixCompletedEventHandler GetMappedFixesForFixCompleted;
        
        /// <remarks/>
        public event GetMappedFixesForRepairCompletedEventHandler GetMappedFixesForRepairCompleted;
        
        /// <remarks/>
        public event GetAllOrphanedFixesCompletedEventHandler GetAllOrphanedFixesCompleted;
        
        /// <remarks/>
        public event GetMatchingRepairsCompletedEventHandler GetMatchingRepairsCompleted;
        
        /// <remarks/>
        public event StoreTranslatedArticleCompletedEventHandler StoreTranslatedArticleCompleted;
        
        /// <remarks/>
        public event RemoveTranslatedArticleCompletedEventHandler RemoveTranslatedArticleCompleted;
        
        /// <remarks/>
        public event GetFixByIdCompletedEventHandler GetFixByIdCompleted;
        
        /// <remarks/>
        public event GetBaseVehiclesForPathCompletedEventHandler GetBaseVehiclesForPathCompleted;
        
        /// <remarks/>
        public event MappedFixVehicleExistsCompletedEventHandler MappedFixVehicleExistsCompleted;
        
        /// <remarks/>
        public event FixVehicleExistsCompletedEventHandler FixVehicleExistsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/MapFix", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MapFix([System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.chiltonsonline.com/InnovaContentDeliveryMessages.xsd")] InnovaFixItem InnovaFixItem, string ChiltonRepairPath, string UserName) {
            object[] results = this.Invoke("MapFix", new object[] {
                        InnovaFixItem,
                        ChiltonRepairPath,
                        UserName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMapFix(InnovaFixItem InnovaFixItem, string ChiltonRepairPath, string UserName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MapFix", new object[] {
                        InnovaFixItem,
                        ChiltonRepairPath,
                        UserName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndMapFix(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MapFixAsync(InnovaFixItem InnovaFixItem, string ChiltonRepairPath, string UserName) {
            this.MapFixAsync(InnovaFixItem, ChiltonRepairPath, UserName, null);
        }
        
        /// <remarks/>
        public void MapFixAsync(InnovaFixItem InnovaFixItem, string ChiltonRepairPath, string UserName, object userState) {
            if ((this.MapFixOperationCompleted == null)) {
                this.MapFixOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMapFixOperationCompleted);
            }
            this.InvokeAsync("MapFix", new object[] {
                        InnovaFixItem,
                        ChiltonRepairPath,
                        UserName}, this.MapFixOperationCompleted, userState);
        }
        
        private void OnMapFixOperationCompleted(object arg) {
            if ((this.MapFixCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MapFixCompleted(this, new MapFixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/UnmapFix", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnmapFix([System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.chiltonsonline.com/InnovaContentDeliveryMessages.xsd")] InnovaFixItem InnovaFixItem, string ChiltonRepairPath, string UserName) {
            object[] results = this.Invoke("UnmapFix", new object[] {
                        InnovaFixItem,
                        ChiltonRepairPath,
                        UserName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnmapFix(InnovaFixItem InnovaFixItem, string ChiltonRepairPath, string UserName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnmapFix", new object[] {
                        InnovaFixItem,
                        ChiltonRepairPath,
                        UserName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUnmapFix(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnmapFixAsync(InnovaFixItem InnovaFixItem, string ChiltonRepairPath, string UserName) {
            this.UnmapFixAsync(InnovaFixItem, ChiltonRepairPath, UserName, null);
        }
        
        /// <remarks/>
        public void UnmapFixAsync(InnovaFixItem InnovaFixItem, string ChiltonRepairPath, string UserName, object userState) {
            if ((this.UnmapFixOperationCompleted == null)) {
                this.UnmapFixOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnmapFixOperationCompleted);
            }
            this.InvokeAsync("UnmapFix", new object[] {
                        InnovaFixItem,
                        ChiltonRepairPath,
                        UserName}, this.UnmapFixOperationCompleted, userState);
        }
        
        private void OnUnmapFixOperationCompleted(object arg) {
            if ((this.UnmapFixCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnmapFixCompleted(this, new UnmapFixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/GetAllChiltonRepairs", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChiltonRepairItem[] GetAllChiltonRepairs() {
            object[] results = this.Invoke("GetAllChiltonRepairs", new object[0]);
            return ((ChiltonRepairItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllChiltonRepairs(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllChiltonRepairs", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ChiltonRepairItem[] EndGetAllChiltonRepairs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ChiltonRepairItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllChiltonRepairsAsync() {
            this.GetAllChiltonRepairsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllChiltonRepairsAsync(object userState) {
            if ((this.GetAllChiltonRepairsOperationCompleted == null)) {
                this.GetAllChiltonRepairsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllChiltonRepairsOperationCompleted);
            }
            this.InvokeAsync("GetAllChiltonRepairs", new object[0], this.GetAllChiltonRepairsOperationCompleted, userState);
        }
        
        private void OnGetAllChiltonRepairsOperationCompleted(object arg) {
            if ((this.GetAllChiltonRepairsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllChiltonRepairsCompleted(this, new GetAllChiltonRepairsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/GetAllInnovaFixes", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InnovaFixItem[] GetAllInnovaFixes() {
            object[] results = this.Invoke("GetAllInnovaFixes", new object[0]);
            return ((InnovaFixItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllInnovaFixes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllInnovaFixes", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public InnovaFixItem[] EndGetAllInnovaFixes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InnovaFixItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllInnovaFixesAsync() {
            this.GetAllInnovaFixesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllInnovaFixesAsync(object userState) {
            if ((this.GetAllInnovaFixesOperationCompleted == null)) {
                this.GetAllInnovaFixesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllInnovaFixesOperationCompleted);
            }
            this.InvokeAsync("GetAllInnovaFixes", new object[0], this.GetAllInnovaFixesOperationCompleted, userState);
        }
        
        private void OnGetAllInnovaFixesOperationCompleted(object arg) {
            if ((this.GetAllInnovaFixesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllInnovaFixesCompleted(this, new GetAllInnovaFixesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/GetAllMappedFixes", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MappedFixItem[] GetAllMappedFixes() {
            object[] results = this.Invoke("GetAllMappedFixes", new object[0]);
            return ((MappedFixItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllMappedFixes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllMappedFixes", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public MappedFixItem[] EndGetAllMappedFixes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MappedFixItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllMappedFixesAsync() {
            this.GetAllMappedFixesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllMappedFixesAsync(object userState) {
            if ((this.GetAllMappedFixesOperationCompleted == null)) {
                this.GetAllMappedFixesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllMappedFixesOperationCompleted);
            }
            this.InvokeAsync("GetAllMappedFixes", new object[0], this.GetAllMappedFixesOperationCompleted, userState);
        }
        
        private void OnGetAllMappedFixesOperationCompleted(object arg) {
            if ((this.GetAllMappedFixesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllMappedFixesCompleted(this, new GetAllMappedFixesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/GetAllMappedChiltonRepairs", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChiltonRepairItem[] GetAllMappedChiltonRepairs() {
            object[] results = this.Invoke("GetAllMappedChiltonRepairs", new object[0]);
            return ((ChiltonRepairItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllMappedChiltonRepairs(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllMappedChiltonRepairs", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ChiltonRepairItem[] EndGetAllMappedChiltonRepairs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ChiltonRepairItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllMappedChiltonRepairsAsync() {
            this.GetAllMappedChiltonRepairsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllMappedChiltonRepairsAsync(object userState) {
            if ((this.GetAllMappedChiltonRepairsOperationCompleted == null)) {
                this.GetAllMappedChiltonRepairsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllMappedChiltonRepairsOperationCompleted);
            }
            this.InvokeAsync("GetAllMappedChiltonRepairs", new object[0], this.GetAllMappedChiltonRepairsOperationCompleted, userState);
        }
        
        private void OnGetAllMappedChiltonRepairsOperationCompleted(object arg) {
            if ((this.GetAllMappedChiltonRepairsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllMappedChiltonRepairsCompleted(this, new GetAllMappedChiltonRepairsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/GetAllUnmappedChiltonRepairs", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChiltonRepairItem[] GetAllUnmappedChiltonRepairs() {
            object[] results = this.Invoke("GetAllUnmappedChiltonRepairs", new object[0]);
            return ((ChiltonRepairItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllUnmappedChiltonRepairs(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllUnmappedChiltonRepairs", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ChiltonRepairItem[] EndGetAllUnmappedChiltonRepairs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ChiltonRepairItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUnmappedChiltonRepairsAsync() {
            this.GetAllUnmappedChiltonRepairsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllUnmappedChiltonRepairsAsync(object userState) {
            if ((this.GetAllUnmappedChiltonRepairsOperationCompleted == null)) {
                this.GetAllUnmappedChiltonRepairsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUnmappedChiltonRepairsOperationCompleted);
            }
            this.InvokeAsync("GetAllUnmappedChiltonRepairs", new object[0], this.GetAllUnmappedChiltonRepairsOperationCompleted, userState);
        }
        
        private void OnGetAllUnmappedChiltonRepairsOperationCompleted(object arg) {
            if ((this.GetAllUnmappedChiltonRepairsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUnmappedChiltonRepairsCompleted(this, new GetAllUnmappedChiltonRepairsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/GetMappedFixesForFix", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MappedFixItem[] GetMappedFixesForFix([System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.chiltonsonline.com/InnovaContentDeliveryMessages.xsd")] InnovaFixItem InnovaFixItem, string LanguageCode) {
            object[] results = this.Invoke("GetMappedFixesForFix", new object[] {
                        InnovaFixItem,
                        LanguageCode});
            return ((MappedFixItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMappedFixesForFix(InnovaFixItem InnovaFixItem, string LanguageCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMappedFixesForFix", new object[] {
                        InnovaFixItem,
                        LanguageCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public MappedFixItem[] EndGetMappedFixesForFix(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MappedFixItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMappedFixesForFixAsync(InnovaFixItem InnovaFixItem, string LanguageCode) {
            this.GetMappedFixesForFixAsync(InnovaFixItem, LanguageCode, null);
        }
        
        /// <remarks/>
        public void GetMappedFixesForFixAsync(InnovaFixItem InnovaFixItem, string LanguageCode, object userState) {
            if ((this.GetMappedFixesForFixOperationCompleted == null)) {
                this.GetMappedFixesForFixOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMappedFixesForFixOperationCompleted);
            }
            this.InvokeAsync("GetMappedFixesForFix", new object[] {
                        InnovaFixItem,
                        LanguageCode}, this.GetMappedFixesForFixOperationCompleted, userState);
        }
        
        private void OnGetMappedFixesForFixOperationCompleted(object arg) {
            if ((this.GetMappedFixesForFixCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMappedFixesForFixCompleted(this, new GetMappedFixesForFixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/GetMappedFixesForRepair", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MappedFixItem[] GetMappedFixesForRepair(string ChiltonRepairPath) {
            object[] results = this.Invoke("GetMappedFixesForRepair", new object[] {
                        ChiltonRepairPath});
            return ((MappedFixItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMappedFixesForRepair(string ChiltonRepairPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMappedFixesForRepair", new object[] {
                        ChiltonRepairPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public MappedFixItem[] EndGetMappedFixesForRepair(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MappedFixItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMappedFixesForRepairAsync(string ChiltonRepairPath) {
            this.GetMappedFixesForRepairAsync(ChiltonRepairPath, null);
        }
        
        /// <remarks/>
        public void GetMappedFixesForRepairAsync(string ChiltonRepairPath, object userState) {
            if ((this.GetMappedFixesForRepairOperationCompleted == null)) {
                this.GetMappedFixesForRepairOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMappedFixesForRepairOperationCompleted);
            }
            this.InvokeAsync("GetMappedFixesForRepair", new object[] {
                        ChiltonRepairPath}, this.GetMappedFixesForRepairOperationCompleted, userState);
        }
        
        private void OnGetMappedFixesForRepairOperationCompleted(object arg) {
            if ((this.GetMappedFixesForRepairCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMappedFixesForRepairCompleted(this, new GetMappedFixesForRepairCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/GetAllOrphanedFixes", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InnovaFixItem[] GetAllOrphanedFixes() {
            object[] results = this.Invoke("GetAllOrphanedFixes", new object[0]);
            return ((InnovaFixItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllOrphanedFixes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllOrphanedFixes", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public InnovaFixItem[] EndGetAllOrphanedFixes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InnovaFixItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllOrphanedFixesAsync() {
            this.GetAllOrphanedFixesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllOrphanedFixesAsync(object userState) {
            if ((this.GetAllOrphanedFixesOperationCompleted == null)) {
                this.GetAllOrphanedFixesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllOrphanedFixesOperationCompleted);
            }
            this.InvokeAsync("GetAllOrphanedFixes", new object[0], this.GetAllOrphanedFixesOperationCompleted, userState);
        }
        
        private void OnGetAllOrphanedFixesOperationCompleted(object arg) {
            if ((this.GetAllOrphanedFixesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllOrphanedFixesCompleted(this, new GetAllOrphanedFixesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/GetMatchingRepairs", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChiltonRepairItem[] GetMatchingRepairs(string TextToMatch, int TopResultsAt) {
            object[] results = this.Invoke("GetMatchingRepairs", new object[] {
                        TextToMatch,
                        TopResultsAt});
            return ((ChiltonRepairItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMatchingRepairs(string TextToMatch, int TopResultsAt, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMatchingRepairs", new object[] {
                        TextToMatch,
                        TopResultsAt}, callback, asyncState);
        }
        
        /// <remarks/>
        public ChiltonRepairItem[] EndGetMatchingRepairs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ChiltonRepairItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMatchingRepairsAsync(string TextToMatch, int TopResultsAt) {
            this.GetMatchingRepairsAsync(TextToMatch, TopResultsAt, null);
        }
        
        /// <remarks/>
        public void GetMatchingRepairsAsync(string TextToMatch, int TopResultsAt, object userState) {
            if ((this.GetMatchingRepairsOperationCompleted == null)) {
                this.GetMatchingRepairsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMatchingRepairsOperationCompleted);
            }
            this.InvokeAsync("GetMatchingRepairs", new object[] {
                        TextToMatch,
                        TopResultsAt}, this.GetMatchingRepairsOperationCompleted, userState);
        }
        
        private void OnGetMatchingRepairsOperationCompleted(object arg) {
            if ((this.GetMatchingRepairsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMatchingRepairsCompleted(this, new GetMatchingRepairsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/StoreTranslatedArticle", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int StoreTranslatedArticle([System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.chiltonsonline.com/InnovaContentDeliveryMessages.xsd")] TranslatedRepairItem TranslatedRepairItem, string UserName) {
            object[] results = this.Invoke("StoreTranslatedArticle", new object[] {
                        TranslatedRepairItem,
                        UserName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginStoreTranslatedArticle(TranslatedRepairItem TranslatedRepairItem, string UserName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StoreTranslatedArticle", new object[] {
                        TranslatedRepairItem,
                        UserName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndStoreTranslatedArticle(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void StoreTranslatedArticleAsync(TranslatedRepairItem TranslatedRepairItem, string UserName) {
            this.StoreTranslatedArticleAsync(TranslatedRepairItem, UserName, null);
        }
        
        /// <remarks/>
        public void StoreTranslatedArticleAsync(TranslatedRepairItem TranslatedRepairItem, string UserName, object userState) {
            if ((this.StoreTranslatedArticleOperationCompleted == null)) {
                this.StoreTranslatedArticleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoreTranslatedArticleOperationCompleted);
            }
            this.InvokeAsync("StoreTranslatedArticle", new object[] {
                        TranslatedRepairItem,
                        UserName}, this.StoreTranslatedArticleOperationCompleted, userState);
        }
        
        private void OnStoreTranslatedArticleOperationCompleted(object arg) {
            if ((this.StoreTranslatedArticleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoreTranslatedArticleCompleted(this, new StoreTranslatedArticleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/RemoveTranslatedArticle", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveTranslatedArticle(int TranslatedArticleId, string UserName) {
            object[] results = this.Invoke("RemoveTranslatedArticle", new object[] {
                        TranslatedArticleId,
                        UserName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveTranslatedArticle(int TranslatedArticleId, string UserName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveTranslatedArticle", new object[] {
                        TranslatedArticleId,
                        UserName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRemoveTranslatedArticle(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveTranslatedArticleAsync(int TranslatedArticleId, string UserName) {
            this.RemoveTranslatedArticleAsync(TranslatedArticleId, UserName, null);
        }
        
        /// <remarks/>
        public void RemoveTranslatedArticleAsync(int TranslatedArticleId, string UserName, object userState) {
            if ((this.RemoveTranslatedArticleOperationCompleted == null)) {
                this.RemoveTranslatedArticleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveTranslatedArticleOperationCompleted);
            }
            this.InvokeAsync("RemoveTranslatedArticle", new object[] {
                        TranslatedArticleId,
                        UserName}, this.RemoveTranslatedArticleOperationCompleted, userState);
        }
        
        private void OnRemoveTranslatedArticleOperationCompleted(object arg) {
            if ((this.RemoveTranslatedArticleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveTranslatedArticleCompleted(this, new RemoveTranslatedArticleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/GetFixById", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("InnovaFixItem", Namespace="http://www.chiltonsonline.com/InnovaContentDeliveryMessages.xsd")]
        public InnovaFixItem GetFixById(System.Guid FixId) {
            object[] results = this.Invoke("GetFixById", new object[] {
                        FixId});
            return ((InnovaFixItem)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFixById(System.Guid FixId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFixById", new object[] {
                        FixId}, callback, asyncState);
        }
        
        /// <remarks/>
        public InnovaFixItem EndGetFixById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InnovaFixItem)(results[0]));
        }
        
        /// <remarks/>
        public void GetFixByIdAsync(System.Guid FixId) {
            this.GetFixByIdAsync(FixId, null);
        }
        
        /// <remarks/>
        public void GetFixByIdAsync(System.Guid FixId, object userState) {
            if ((this.GetFixByIdOperationCompleted == null)) {
                this.GetFixByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFixByIdOperationCompleted);
            }
            this.InvokeAsync("GetFixById", new object[] {
                        FixId}, this.GetFixByIdOperationCompleted, userState);
        }
        
        private void OnGetFixByIdOperationCompleted(object arg) {
            if ((this.GetFixByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFixByIdCompleted(this, new GetFixByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/GetBaseVehiclesForPath", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChiltonBaseVehicle[] GetBaseVehiclesForPath(string ChiltonPath) {
            object[] results = this.Invoke("GetBaseVehiclesForPath", new object[] {
                        ChiltonPath});
            return ((ChiltonBaseVehicle[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBaseVehiclesForPath(string ChiltonPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBaseVehiclesForPath", new object[] {
                        ChiltonPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public ChiltonBaseVehicle[] EndGetBaseVehiclesForPath(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ChiltonBaseVehicle[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBaseVehiclesForPathAsync(string ChiltonPath) {
            this.GetBaseVehiclesForPathAsync(ChiltonPath, null);
        }
        
        /// <remarks/>
        public void GetBaseVehiclesForPathAsync(string ChiltonPath, object userState) {
            if ((this.GetBaseVehiclesForPathOperationCompleted == null)) {
                this.GetBaseVehiclesForPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBaseVehiclesForPathOperationCompleted);
            }
            this.InvokeAsync("GetBaseVehiclesForPath", new object[] {
                        ChiltonPath}, this.GetBaseVehiclesForPathOperationCompleted, userState);
        }
        
        private void OnGetBaseVehiclesForPathOperationCompleted(object arg) {
            if ((this.GetBaseVehiclesForPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBaseVehiclesForPathCompleted(this, new GetBaseVehiclesForPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/MappedFixVehicleExists", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MappedFixVehicleExists([System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.chiltonsonline.com/InnovaContentDeliveryMessages.xsd")] MappedFixItem MappedFixItem, int[] VehicleIds) {
            object[] results = this.Invoke("MappedFixVehicleExists", new object[] {
                        MappedFixItem,
                        VehicleIds});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMappedFixVehicleExists(MappedFixItem MappedFixItem, int[] VehicleIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MappedFixVehicleExists", new object[] {
                        MappedFixItem,
                        VehicleIds}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndMappedFixVehicleExists(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MappedFixVehicleExistsAsync(MappedFixItem MappedFixItem, int[] VehicleIds) {
            this.MappedFixVehicleExistsAsync(MappedFixItem, VehicleIds, null);
        }
        
        /// <remarks/>
        public void MappedFixVehicleExistsAsync(MappedFixItem MappedFixItem, int[] VehicleIds, object userState) {
            if ((this.MappedFixVehicleExistsOperationCompleted == null)) {
                this.MappedFixVehicleExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMappedFixVehicleExistsOperationCompleted);
            }
            this.InvokeAsync("MappedFixVehicleExists", new object[] {
                        MappedFixItem,
                        VehicleIds}, this.MappedFixVehicleExistsOperationCompleted, userState);
        }
        
        private void OnMappedFixVehicleExistsOperationCompleted(object arg) {
            if ((this.MappedFixVehicleExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MappedFixVehicleExistsCompleted(this, new MappedFixVehicleExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ChiltonAuthorizationHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://innova.content.chiltonsonline.com/FixVehicleExists", RequestNamespace="http://innova.content.chiltonsonline.com/", ResponseNamespace="http://innova.content.chiltonsonline.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FixVehicleExists(System.Guid FixId, int[] VehicleIds) {
            object[] results = this.Invoke("FixVehicleExists", new object[] {
                        FixId,
                        VehicleIds});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFixVehicleExists(System.Guid FixId, int[] VehicleIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FixVehicleExists", new object[] {
                        FixId,
                        VehicleIds}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndFixVehicleExists(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FixVehicleExistsAsync(System.Guid FixId, int[] VehicleIds) {
            this.FixVehicleExistsAsync(FixId, VehicleIds, null);
        }
        
        /// <remarks/>
        public void FixVehicleExistsAsync(System.Guid FixId, int[] VehicleIds, object userState) {
            if ((this.FixVehicleExistsOperationCompleted == null)) {
                this.FixVehicleExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFixVehicleExistsOperationCompleted);
            }
            this.InvokeAsync("FixVehicleExists", new object[] {
                        FixId,
                        VehicleIds}, this.FixVehicleExistsOperationCompleted, userState);
        }
        
        private void OnFixVehicleExistsOperationCompleted(object arg) {
            if ((this.FixVehicleExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FixVehicleExistsCompleted(this, new FixVehicleExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://innova.content.chiltonsonline.com/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://innova.content.chiltonsonline.com/", IsNullable=false)]
    public partial class ChiltonAuthorizationHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string encryptedKeyField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string EncryptedKey {
            get {
                return this.encryptedKeyField;
            }
            set {
                this.encryptedKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://innova.content.chiltonsonline.com/")]
    public partial class ChiltonBaseVehicle {
        
        private int baseVehicleIDField;
        
        private int yearIDField;
        
        private int makeIDField;
        
        private string makeNameField;
        
        private int modelIDField;
        
        private string modelNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int BaseVehicleID {
            get {
                return this.baseVehicleIDField;
            }
            set {
                this.baseVehicleIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int YearID {
            get {
                return this.yearIDField;
            }
            set {
                this.yearIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MakeID {
            get {
                return this.makeIDField;
            }
            set {
                this.makeIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MakeName {
            get {
                return this.makeNameField;
            }
            set {
                this.makeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int ModelID {
            get {
                return this.modelIDField;
            }
            set {
                this.modelIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ModelName {
            get {
                return this.modelNameField;
            }
            set {
                this.modelNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.chiltonsonline.com/InnovaContentDeliveryMessages.xsd")]
    public partial class TranslatedRepairItem {
        
        private InnovaFixItem innovaFixItemField;
        
        private ChiltonRepairItem chiltonRepairItemField;
        
        private string translatedContentField;
        
        private string articleTitleField;
        
        private string languageCodeField;
        
        /// <remarks/>
        public InnovaFixItem InnovaFixItem {
            get {
                return this.innovaFixItemField;
            }
            set {
                this.innovaFixItemField = value;
            }
        }
        
        /// <remarks/>
        public ChiltonRepairItem ChiltonRepairItem {
            get {
                return this.chiltonRepairItemField;
            }
            set {
                this.chiltonRepairItemField = value;
            }
        }
        
        /// <remarks/>
        public string TranslatedContent {
            get {
                return this.translatedContentField;
            }
            set {
                this.translatedContentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ArticleTitle {
            get {
                return this.articleTitleField;
            }
            set {
                this.articleTitleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="language")]
        public string LanguageCode {
            get {
                return this.languageCodeField;
            }
            set {
                this.languageCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.chiltonsonline.com/InnovaContentDeliveryMessages.xsd")]
    public partial class InnovaFixItem {
        
        private string fixIdField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string FixId {
            get {
                return this.fixIdField;
            }
            set {
                this.fixIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.chiltonsonline.com/InnovaContentDeliveryMessages.xsd")]
    public partial class ChiltonRepairItem {
        
        private string parentPathField;
        
        private string pathField;
        
        private string xPathField;
        
        private int tOCIdField;
        
        private string tOCNameField;
        
        private string languageCodeField;
        
        private System.DateTime dateRequestedField;
        
        private string requestedByUserNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ParentPath {
            get {
                return this.parentPathField;
            }
            set {
                this.parentPathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string XPath {
            get {
                return this.xPathField;
            }
            set {
                this.xPathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int TOCId {
            get {
                return this.tOCIdField;
            }
            set {
                this.tOCIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string TOCName {
            get {
                return this.tOCNameField;
            }
            set {
                this.tOCNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="language")]
        public string LanguageCode {
            get {
                return this.languageCodeField;
            }
            set {
                this.languageCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime DateRequested {
            get {
                return this.dateRequestedField;
            }
            set {
                this.dateRequestedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string RequestedByUserName {
            get {
                return this.requestedByUserNameField;
            }
            set {
                this.requestedByUserNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.chiltonsonline.com/InnovaContentDeliveryMessages.xsd")]
    public partial class MappedFixItem {
        
        private InnovaFixItem innovaFixItemField;
        
        private ChiltonRepairItem chiltonRepairItemField;
        
        private System.DateTime dateMappedField;
        
        private string mappedByUserNameField;
        
        private string contextBVIDField;
        
        /// <remarks/>
        public InnovaFixItem InnovaFixItem {
            get {
                return this.innovaFixItemField;
            }
            set {
                this.innovaFixItemField = value;
            }
        }
        
        /// <remarks/>
        public ChiltonRepairItem ChiltonRepairItem {
            get {
                return this.chiltonRepairItemField;
            }
            set {
                this.chiltonRepairItemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime DateMapped {
            get {
                return this.dateMappedField;
            }
            set {
                this.dateMappedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MappedByUserName {
            get {
                return this.mappedByUserNameField;
            }
            set {
                this.mappedByUserNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="positiveInteger")]
        public string ContextBVID {
            get {
                return this.contextBVIDField;
            }
            set {
                this.contextBVIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void MapFixCompletedEventHandler(object sender, MapFixCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MapFixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MapFixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void UnmapFixCompletedEventHandler(object sender, UnmapFixCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnmapFixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnmapFixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetAllChiltonRepairsCompletedEventHandler(object sender, GetAllChiltonRepairsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllChiltonRepairsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllChiltonRepairsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChiltonRepairItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChiltonRepairItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetAllInnovaFixesCompletedEventHandler(object sender, GetAllInnovaFixesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllInnovaFixesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllInnovaFixesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InnovaFixItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InnovaFixItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetAllMappedFixesCompletedEventHandler(object sender, GetAllMappedFixesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllMappedFixesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllMappedFixesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MappedFixItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MappedFixItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetAllMappedChiltonRepairsCompletedEventHandler(object sender, GetAllMappedChiltonRepairsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllMappedChiltonRepairsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllMappedChiltonRepairsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChiltonRepairItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChiltonRepairItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetAllUnmappedChiltonRepairsCompletedEventHandler(object sender, GetAllUnmappedChiltonRepairsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUnmappedChiltonRepairsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUnmappedChiltonRepairsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChiltonRepairItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChiltonRepairItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetMappedFixesForFixCompletedEventHandler(object sender, GetMappedFixesForFixCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMappedFixesForFixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMappedFixesForFixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MappedFixItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MappedFixItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetMappedFixesForRepairCompletedEventHandler(object sender, GetMappedFixesForRepairCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMappedFixesForRepairCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMappedFixesForRepairCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MappedFixItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MappedFixItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetAllOrphanedFixesCompletedEventHandler(object sender, GetAllOrphanedFixesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllOrphanedFixesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllOrphanedFixesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InnovaFixItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InnovaFixItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetMatchingRepairsCompletedEventHandler(object sender, GetMatchingRepairsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMatchingRepairsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMatchingRepairsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChiltonRepairItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChiltonRepairItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void StoreTranslatedArticleCompletedEventHandler(object sender, StoreTranslatedArticleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoreTranslatedArticleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoreTranslatedArticleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void RemoveTranslatedArticleCompletedEventHandler(object sender, RemoveTranslatedArticleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveTranslatedArticleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveTranslatedArticleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetFixByIdCompletedEventHandler(object sender, GetFixByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFixByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFixByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InnovaFixItem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InnovaFixItem)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetBaseVehiclesForPathCompletedEventHandler(object sender, GetBaseVehiclesForPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBaseVehiclesForPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBaseVehiclesForPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChiltonBaseVehicle[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChiltonBaseVehicle[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void MappedFixVehicleExistsCompletedEventHandler(object sender, MappedFixVehicleExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MappedFixVehicleExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MappedFixVehicleExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void FixVehicleExistsCompletedEventHandler(object sender, FixVehicleExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FixVehicleExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FixVehicleExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591